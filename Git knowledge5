向 GitHub 提交代码
SSH是一种网络协议，用于计算机之间的加密登录.Windows 系统安装了 Git Bash 应该也是带了 SSH 的。大家可以在终端（win下在 Git Bash 里）输入 ssh 
ssh-keygen -t rsa #指定 rsa 算法生成密钥，接着连续三个回车键（不需要输入密码），然后就会生成两个文件 id_rsa 和 id_rsa.pub ，而 id_rsa 是密钥，
id_rsa.pub 就是公钥。（使用时输入公钥）
把 id_rsa.pub 的内容添加到 GitHub 上，这样你本地的 id_rsa 密钥跟 GitHub上的 id_rsa.pub 公钥进行配对，授权成功才可以提交代码。
id_rsa.pub 公钥文件里的内容复制粘贴进去就可以了，Title 那栏不需要填写，点击 Add SSH key 按钮就ok了。
SSH key 添加成功之后，输入 ssh -T git@github.com 进行测试。

Push
如果你本地代码有更新了，那么就需要把本地代码推到远程仓库，这样本地仓库跟远程仓库就可以保持同步了。
git push origin master 把本地代码推到远程 master 分支。
Pull
如果别人提交代码到远程仓库，这个时候你需要把远程仓库的最新代码拉下来，然后保证两端代码的同步。
git pull origin master 把远程最新的代码更新到本地
提交代码
提交代码有两种方法：
Clone自己的项目 以我在 GitHub 上创建的 test 项目为例
git clone git@github.com:wangxuanju/test.git 这样就把 test 项目 clone 到了本地，把 clone 命令理解为高级点的复制
只需要在这个 test 目录下任意修改或者添加文件，然后进行 commit ，之后就可以执行git push origin master进行代码提交


假设我们本地有个 test2 的项目，我们需要的是在 GitHub 上建一个 test 的项目，然后把本地test2 上的所有代码 commit 记录提交到 GitHub 上的 test 项目。
第一步就是在 GitHub 上建一个 test 项目
第二步把本地 test2 项目与 GitHub 上的 test 项目进行关联，切换到 test2 目录
git remote add origin git@github.com:wangxuanju/test.git就是添加一个远程仓库，他的地址是xxx
origin 是给这个项目的远程仓库起的名字，是的，名字你可以随便取，只不过大家公认的只有一个远程仓库时名字就是 origin ，
为什么要给远程仓库取名字？因为我们可能一个项目有多个远程仓库.
git remote -v查看我们当前项目有哪些远程仓库可以执行如下命令
git push origin master我们本地的仓库就可以向远程仓库进行代码提交


缩写输入
用到了alias配置了，翻译过来就是别名的意思
git config --global alias.co checkout
git config --global alias.psm 'push origin master' 完全可以根据自己的习惯去定制，除此之外还可以设置组合
git config --global alias.plm 'pull origin master'
之后经常用到的git push origin master 和 git pull origin master 直接就用 git psm 和 git plm 代替了
git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev- 
commit --date=relative  一个很牛的命令
git config --global alias.lg "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)% d%Creset %s %Cgreen(%cr) 
%C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"这样以后直接输入 git lg 就行
git config --global core.editor "vim"	# 设置Editor使用vim  默认情况下 git 用的编辑器是 vi ，如果不喜欢可以改成其他编辑器。
git config --global color.ui true给 Git 着色，输入如下命令即可
git config --global core.quotepath false # 设置显示中文文件名

diff
git diff <$id1> <$id2>	# 比较两次提交之间的差异
git diff <branch1>..<branch2> # 在两个分支之间比较
git diff --staged	# 比较暂存区和版本库差异

git checkout developcheckout 一般用作切换分支使用，比如切换到 develop 分支
checkout 不只用作切换分支，可以用来切换tag，切换到某次commit
git checkout v1.0
git checkout ffd9f2dd68f1eb21d36cee50dbdd504e95d9c8f7 # 后面的一长串是commit_id，是每次commit的SHA1值，可以根据 git log 看到。






